name: Collect FX rates

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes (UTC)
  workflow_dispatch: {}

jobs:
  collect:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Gate to PT window
        id: gate
        run: |
          PT_HOUR=$(TZ=America/Los_Angeles date +%H)
          if [ "$PT_HOUR" -ge 5 ] && [ "$PT_HOUR" -lt 16 ]; then
            echo "in_window=true" >> $GITHUB_OUTPUT
          else
            echo "in_window=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure jq present
        if: steps.gate.outputs.in_window == 'true'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run nap() and append point
        if: steps.gate.outputs.in_window == 'true'
        env:
          WISE_TOKEN: ${{ secrets.WISE_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          # Source your functions and call nap()
          . scripts/rates.sh
          OUT=$(nap)

          # Parse the table
          # Expected header: "Source  Rate  Marker  Spread"
          # Rows: mc, visa, wise (wise has empty marker/spread)
          parse() {
            echo "$OUT" | awk 'NR>1 {print $1, $2, $3, $4}'
          }

          mc_rate=$(parse | awk '$1=="mc"{print $2}')
          visa_rate=$(parse | awk '$1=="visa"{print $2}')
          wise_rate=$(parse | awk '$1=="wise"{print $2}')

          # Fallback guard
          if [ -z "${mc_rate:-}" ] || [ -z "${visa_rate:-}" ] || [ -z "${wise_rate:-}" ]; then
            echo "Missing a rate in nap() output; refusing to write." >&2
            echo "$OUT"
            exit 0
          fi

          # PT timestamp (ISO)
          ts=$(TZ=America/Los_Angeles date -Iseconds)

          mkdir -p docs
          [ -f docs/data.json ] || echo "[]" > docs/data.json

          # Append new point, keep last ~3 days (12 points/hour * 24 * 3 = 864)
          node - <<'NODE'
          const fs = require('fs');
          const path = 'docs/data.json';
          const data = fs.existsSync(path) ? JSON.parse(fs.readFileSync(path,'utf8')) : [];
          const point = {
            ts: process.env.TS,
            mc:   parseFloat(process.env.MC),
            visa: parseFloat(process.env.VISA),
            wise: parseFloat(process.env.WISE),
            spread_mc:   parseFloat(process.env.WISE) - parseFloat(process.env.MC),
            spread_visa: parseFloat(process.env.WISE) - parseFloat(process.env.VISA)
          };
          data.push(point);
          const trimmed = data.slice(-864);
          fs.writeFileSync(path, JSON.stringify(trimmed, null, 2));
          NODE
        env:
          TS: ${{ steps.gate.outputs.in_window && '' }}
        # re-export envs properly (Actions quirk)
      - name: Export envs for Node step
        if: steps.gate.outputs.in_window == 'true'
        run: |
          echo "TS=$(TZ=America/Los_Angeles date -Iseconds)" >> $GITHUB_ENV
          . scripts/rates.sh
          OUT=$(nap)
          echo "$OUT" | awk 'NR>1 {print $1, $2}' > /tmp/rates.txt
          echo "MC=$(awk '$1=="mc"{print $2}' /tmp/rates.txt)" >> $GITHUB_ENV
          echo "VISA=$(awk '$1=="visa"{print $2}' /tmp/rates.txt)" >> $GITHUB_ENV
          echo "WISE=$(awk '$1=="wise"{print $2}' /tmp/rates.txt)" >> $GITHUB_ENV

      - name: Commit & push if changed
        if: steps.gate.outputs.in_window == 'true'
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add docs/data.json
          if ! git diff --cached --quiet; then
            git commit -m "data: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          else
            echo "No changes"
          fi

